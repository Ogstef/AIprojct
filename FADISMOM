public int[] heuristicFunction(int p) {
		int counter = 0;
		int countSelect = 0;
		int[] ourSelection = new int[10];
		int disCard=0;
		int [] opponentsBestCards=new int[5];

		for (int i = 0; i < 5; i++) {
			opponentsBestCards[i] = minCardOfEachExpedition(p)[i];

			for (int y = getCardsAvailableInDisplay().length-1; y>=0; y--) {
				if (getCardsAvailableInDisplay()[y]- opponentsBestCards[i] < 5
						&& categorizeCards(opponentsBestCards[i])== categorizeCards(getCardsAvailableInDisplay()[y]))
						{
							disCard = y;
						}
				if (getRoundNo()<=2 &&
						categorizeCards(getCardsAvailableInDisplay()[y]) == categorizeCards(minCardOfEachExpedition(p)[i])
						&&(getCardsAvailableInDisplay()[y]==1
						||getCardsAvailableInDisplay()[y]==21
						||getCardsAvailableInDisplay()[y]==31
						||getCardsAvailableInDisplay()[y]==41)
						&& (minCardOfEachExpedition(p)[i]==1
						|| minCardOfEachExpedition(p)[i]==11
						|| minCardOfEachExpedition(p)[i]==21
						|| minCardOfEachExpedition(p)[i]==31
						|| minCardOfEachExpedition(p)[i]==41))
				{

							counter ++;
							ourSelection[countSelect] += (y+1);
							countSelect++;
				}
				else if (getRoundNo() <= 2
						&& getCardsAvailableInDisplay()[y] - minCardOfEachExpedition(p)[i] <= 3
						&& getCardsAvailableInDisplay()[y] - minCardOfEachExpedition(p)[i] > 0
						&& categorizeCards(getCardsAvailableInDisplay()[y]) == categorizeCards(minCardOfEachExpedition(p)[i]))
					{

							counter++;
							ourSelection[countSelect] += (y + 1);
							countSelect++;
					}
				else if (getRoundNo() > 2
						&& getCardsAvailableInDisplay()[y] - minCardOfEachExpedition(p)[i] < 5
						&& getCardsAvailableInDisplay()[y] - minCardOfEachExpedition(p)[i] > 0
						&& categorizeCards(getCardsAvailableInDisplay()[y]) == categorizeCards(minCardOfEachExpedition(p)[i]))
					{
							counter++;
							ourSelection[countSelect] += (y + 1);
							countSelect++;
					}

			}

		}
		Arrays.sort(ourSelection);
		int retval=0;
		for (int digit: ourSelection){
			retval *=10;
			retval +=digit;
		}
		retval = Integer.parseInt(String.valueOf(retval) +String.valueOf(disCard));
		int [] whatToDo = new int[]{counter, retval};
		System.out.println("We are in heuristic \n");
		System.out.println("This is what to do array" + Arrays.toString(whatToDo));
		System.out.println("This is our selection" + Arrays.toString(ourSelection));
		return whatToDo;
	}


	public int [] heuristic ( int player){
		int counter = 0;
		int countSelect= 0;
		int [] ourSelection = new int [10];
		int disCard= 0;
		int [] opponentsBestCards = new int[5];

		for (int i =0; i<5 ; i++){

			opponentsBestCards[i] = minCardOfEachExpedition(player)[i];
			for (int y= 0; y<getCardsAvailableInDisplay().length;y++){
				if ( getRoundNo() <=2 ){
					if (categorizeCards(getCardsAvailableInDisplay()[y]) == categorizeCards(minCardOfEachExpedition(2)[i]))
					{
						if ((getCardsAvailableInDisplay()[y]==1
							||getCardsAvailableInDisplay()[y]==21
							||getCardsAvailableInDisplay()[y]==31
							||getCardsAvailableInDisplay()[y]==41)
							&& (minCardOfEachExpedition(player)[i]==1
							|| minCardOfEachExpedition(player)[i]==11
							|| minCardOfEachExpedition(player)[i]==21
							|| minCardOfEachExpedition(player)[i]==31
							|| minCardOfEachExpedition(player)[i]==41))
							{
								counter ++;
								ourSelection[countSelect] += (y+1);
								countSelect++;
							}
						else if (getCardsAvailableInDisplay()[y] - minCardOfEachExpedition(player)[i] <3
								&& getCardsAvailableInDisplay()[y] - minCardOfEachExpedition(player)[i] >0)
								{
									counter ++;
									ourSelection[countSelect] += (y+1);
									countSelect++;
									minCardOfEachExpedition(player)[i] = getCardsAvailableInDisplay()[y];
								}
					}
				}
				else {
					if (getCardsAvailableInDisplay()[y] - minCardOfEachExpedition(player)[i] <5
					&&getCardsAvailableInDisplay()[y] - minCardOfEachExpedition(player)[i] >0
					&& categorizeCards(getCardsAvailableInDisplay()[y]) == categorizeCards(minCardOfEachExpedition(player)[i]))
					{
						counter++;
						ourSelection[countSelect] += (y+1);
						countSelect++;
					}
				}
				if (getCardsAvailableInDisplay()[y]- opponentsBestCards[i] < 5
						&& categorizeCards(opponentsBestCards[i])== categorizeCards(getCardsAvailableInDisplay()[y]))
				{
					disCard = y;
				}
			}
		}
		Arrays.sort(ourSelection);
		int retval=0;
		for (int digit: ourSelection){
			retval *=10;
			retval +=digit;
		}
		retval = Integer.parseInt(String.valueOf(retval) +String.valueOf(disCard));
		int [] whatToDo = new int[]{counter, retval};
		System.out.println("We are in heuristic \n");
		System.out.println("This is what to do array" + Arrays.toString(whatToDo));
		System.out.println("This is our selection" + Arrays.toString(ourSelection));
		return whatToDo;
	}
